// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/@prisma-app/client"
  binaryTargets = ["native", "debian-openssl-1.1.x"]
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(uuid())
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  username      String
  email         String    @unique
  role          String    @default("user")    // user, creator, placeowner, admin
  avatar        String?

  passwordHash  String
  activatedAt   DateTime? // Дата активации аккаунта
  activateCode  String?   // Код подтверждения регистрации
  recoverCode   String?   // Код восстановления пароля

  city          String?
  phone         String?
  legalName     String?
  inn           String?
  address       String?

  ratings       Rating[]

  comments         Comment[]
  activeProducts   Product[] @relation(name: "UserActiveProducts")
  favoriteProducts Product[] @relation(name: "UserFavoriteProducts")
  checks           Check[]

  createdProducts Product[] // Разработчик турпродуктов
  createdPlaces   Place[]   // Владелец ресурса
}

model Rating {
  id          String    @id @default(uuid())
  createdAt   DateTime  @default(now())

  value     Int

  userId    String
  user      User      @relation(fields: [userId], references: [id])

  placeId   String?
  place     Place?    @relation(fields: [placeId], references: [id])

  productId String?
  product   Product?  @relation(fields: [productId], references: [id])
}

model Check {
  id          String    @id @default(uuid())
  createdAt   DateTime  @default(now())

  buyerId   String
  buyer     User    @relation(fields: [buyerId], references: [id])
  productId String
  product   Product @relation(fields: [productId], references: [id])

  price Float
}

model Product {
  id          String    @id @default(uuid())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  type        String    // excursion, tour, quest, event
  active      Boolean   @default(false)
  price       Float     @default(0)

  crmId       String?
  creatorId   String
  creator     User      @relation(fields: [creatorId], references: [id])
  buyers      User[]    @relation(name: "UserActiveProducts")
  favors      User[]    @relation(name: "UserFavoriteProducts")

  name        String
  short       String?
  description String?
  image       String?
  imageDhash  String?

  comments    Comment[]
  route       RoutePoint[]
  rating      Rating[]
  media       Media[]
  tags        Tag[]
  checks      Check[]

  city        String?
  address     String?
  coordinates String?
  beginDate   DateTime?
  endDate     DateTime?
  assistant   String?

  @@index([imageDhash])
}

model RoutePoint {
  id          String    @id @default(uuid())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  productId   String
  product     Product @relation(fields: [productId], references: [id])

  placeId     String
  place       Place   @relation(fields: [placeId], references: [id])

  order       Int
  date        DateTime
}

model Place {
  id          String    @id @default(uuid())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  crmId       String?
  creatorId   String?
  creator     User?     @relation(fields: [creatorId], references: [id])
  active      Boolean   @default(false)

  name        String
  short       String?
  description String?
  image       String?
  imageDhash  String?

  comments    Comment[]
  routes      RoutePoint[]
  rating      Rating[]
  media       Media[]
  tags        Tag[]

  city        String?
  address     String?
  coordinates String?
  date        DateTime?

  @@index([imageDhash])
}

model Tag {
  id          String    @id @default(uuid())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  name        String    @unique

  places      Place[]
  products    Product[]
}

model Comment {
  id          String    @id @default(uuid())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  userId      String
  user        User      @relation(fields: [userId], references: [id])
  text        String
  media       Media[]

  placeId       String?
  parentPlace   Place?    @relation(fields: [placeId], references: [id])
  productId     String?
  parentProduct Product?  @relation(fields: [productId], references: [id])
}

model Media {
  id          String    @id @default(uuid())
  createdAt   DateTime  @default(now())

  type        String    // image, video
  url         String
  dhash       String?

  name        String?
  description String?
  community   Boolean   @default(false)

  comments    Comment[]
  places      Place[]
  products    Product[]

  @@index([dhash])
}

model Feedback {
  id          String    @id @default(uuid())
  createdAt   DateTime  @default(now())

  name    String
  email   String
  content String
}
