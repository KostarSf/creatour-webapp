// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(uuid())
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  username      String    @unique
  email         String    @unique
  passwordHash  String
  role          String    @default("user")    // user, creator, placeowner, admin

  city          String?
  phone         String?
  legalName     String?
  inn           String?

  ratings       Rating[]

  comments        Comment[]
  activeProducts  Product[] @relation(name: "UserActiveProducts")

  createdProducts Product[]
  createdPlaces   Place[]
}

model Rating {
  id          String    @id @default(uuid())
  createdAt   DateTime  @default(now())

  value     Int

  userId    String
  user      User      @relation(fields: [userId], references: [id])

  placeId   String?
  place     Place?    @relation(fields: [placeId], references: [id])

  productId String?
  product   Product?  @relation(fields: [productId], references: [id])
}

model Product {
  id          String    @id @default(uuid())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  type        String    // excursion, tour, quest, event
  active      Boolean   @default(false)
  price       Float     @default(0)

  crmId       String?
  creatorId   String
  creator     User      @relation(fields: [creatorId], references: [id])
  buyers      User[]    @relation(name: "UserActiveProducts")

  name        String
  short       String?
  description String?
  image       String?

  comments    Comment[]
  route       RoutePoint[]
  rating      Rating[]
  media       Media[]
  tags        Tag[]

  city        String?
  address     String?
  coordinates String?
  beginDate   DateTime?
  endDate     DateTime?
  assistant   String?
}

model RoutePoint {
  id          String    @id @default(uuid())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  productId   String
  product     Product @relation(fields: [productId], references: [id])

  placeId     String
  place       Place   @relation(fields: [placeId], references: [id])

  order       Int
  date        DateTime
}

model Place {
  id          String    @id @default(uuid())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  crmId       String?
  creatorId   String
  creator     User      @relation(fields: [creatorId], references: [id])

  name        String
  short       String?
  description String?
  image       String?

  comments    Comment[]
  routes      RoutePoint[]
  rating      Rating[]
  media       Media[]
  tags        Tag[]

  city        String?
  address     String?
  coordinates String?
}

model Tag {
  id          String    @id @default(uuid())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  name        String    @unique

  places      Place[]
  products    Product[]
}

model Comment {
  id          String    @id @default(uuid())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  userId      String
  user        User      @relation(fields: [userId], references: [id])
  text        String
  media       Media[]

  placeId       String?
  parentPlace   Place?    @relation(fields: [placeId], references: [id])
  productId     String?
  parentProduct Product?  @relation(fields: [productId], references: [id])
}

model Media {
  id          String    @id @default(uuid())
  createdAt   DateTime  @default(now())

  type    String    // image, video
  url     String

  name        String?
  description String?

  commentId   String?
  comment     Comment?  @relation(fields: [commentId], references: [id])

  placeId     String?
  place       Place?    @relation(fields: [placeId], references: [id])

  productId   String?
  product     Product?  @relation(fields: [productId], references: [id])
}
